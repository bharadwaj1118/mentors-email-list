// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  MENTOR
  MENTEE
  BOTH
  ADMIN
}

model User {
  id               String     @id @default(uuid())
  username         String     @unique
  email            String     @unique
  imageUrl         String     @db.Text
  clerkId          String     @unique
  bio              String?    @db.Text
  shortBio         String?    @db.Text
  portfolioWebsite String?    @db.Text
  position         String?
  organization     String?
  city             String?
  country          String?
  role             Role?      @default(MENTOR)
  languages        language[]
  expertise        Json?
  toolkit          Json?
  industries       Json?
  duration         String?
  price            Float?
  maxSessions      Int?
  zoomLink         String?

  events           Event[]
  sessionsGiven    Session[] @relation("sessionsGiven")
  sessionsReceived Session[] @relation("sessionsReceived")

  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model language {
  id   String @id @default(uuid())
  name String @unique

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Event {
  id    String   @id @default(uuid())
  title String
  start DateTime
  end   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session Session[]

  @@index([userId])
}

enum SessionStatus {
  AVAILABLE
  REQUESTED
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

model Session {
  id          String  @id @default(uuid())
  objective   String? @db.Text
  description String? @db.Text
  outcome     String? @db.Text
  duration    String?
  category    String?
  price       Float?

  mentorId String
  mentor   User   @relation("sessionsGiven", fields: [mentorId], references: [id])

  menteeId String?
  mentee   User?   @relation("sessionsReceived", fields: [menteeId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  start DateTime
  end   DateTime

  status    SessionStatus? @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([mentorId])
}

model Subscribe {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String   @default("MENTEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
