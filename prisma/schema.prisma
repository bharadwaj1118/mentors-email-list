// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  MENTOR
  MENTEE
  BOTH
  ADMIN
}

model User {
  id               String       @id @default(uuid())
  username         String       @unique
  email            String       @unique
  imageUrl         String       @db.Text
  clerkId          String       @unique
  bio              String?      @db.Text
  shortBio         String?      @db.Text
  portfolioWebsite String?      @db.Text
  linkedinProfile  String?      @db.Text
  position         String?
  organization     String?
  city             String?
  country          String?
  location         String?
  role             Role?        @default(MENTOR)
  languages        Language[]
  expertise        Expertise[]
  toolkit          Tool[]
  industries       Industry[]
  experiences      Experience[]
  duration         Int?
  price            Int?
  maxSessions      Int?
  zoomLink         String?
  challenge        String?
  recommendedBy    String?
  companySize      String?

  isVerified  Boolean @default(false)
  isArchived  Boolean @default(false)
  isOnboarded Boolean @default(false)

  events           Event[]
  sessionsGiven    Session[] @relation("sessionsGiven")
  sessionsReceived Session[] @relation("sessionsReceived")

  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([clerkId])
  @@fulltext([username, bio, shortBio])
}

model Language {
  id   String @id @default(uuid())
  name String

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Tool {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  imageUrl    String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Expertise {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  imageUrl    String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Industry {
  id          String @id @default(uuid())
  name        String
  description String @db.Text
  imageUrl    String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Event {
  id    String   @id @default(uuid())
  title String
  start DateTime
  end   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session Session[]

  @@index([userId])
}

enum SessionStatus {
  AVAILABLE
  REQUESTED
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
}

model Session {
  id          String  @id @default(uuid())
  objective   String? @db.Text
  description String? @db.Text
  outcome     String? @db.Text
  duration    Int?
  category    String?
  price       Int?

  mentorId String
  mentor   User   @relation("sessionsGiven", fields: [mentorId], references: [id])

  menteeId String?
  mentee   User?   @relation("sessionsReceived", fields: [menteeId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  start DateTime
  end   DateTime

  status    SessionStatus? @default(AVAILABLE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([mentorId])
}

model Subscribe {
  id        String   @id @default(uuid())
  email     String
  role      String   @default("MENTEE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Support {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String
  subject   String @db.Text
  message   String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id          String    @id @default(uuid())
  companyName String
  description String    @db.Text
  imageUrl    String    @db.Text
  start       DateTime?
  end         DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, companyName])
  @@index([userId])
}
